{"version":3,"sources":["utils.js","components/currency-converter/currency.reducer.jsx","components/currency-converter/currency-converter.styles.jsx","components/currency-converter/currency-converter.component.jsx","App.js","serviceWorker.js","index.js"],"names":["fetchData","outputBase","Promise","resolve","reject","fetch","then","res","json","data","rates","catch","err","info","INITIAL_STATE","input","output","options","error","isLoading","currencyReducer","state","action","type","payload","PageContainer","styled","div","CurrencyConverterContainer","ConvertButton","button","CurrencyConverter","useReducer","dispatch","useEffect","a","Object","symbols","keys","getOptions","handleConvertion","outputBaseRate","result","toFixed","onChange","e","target","value","autoFocus","readOnly","map","option","key","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.06bd94aa.chunk.js","sourcesContent":["export const fetchData = (outputBase) => {\r\n  const url =\r\n    \"http://data.fixer.io/api/latest?access_key=166e64d8585a6f6f7879b63ccc83ef8b&format=1\";\r\n\r\n  return new Promise((resolve, reject) => {\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data) =>\r\n        data.rates[outputBase]\r\n          ? resolve(data.rates[outputBase])\r\n          : reject(\"Currency not found\")\r\n      ).catch((err) => reject(err.info));\r\n  });\r\n};\r\nexport const fetchSelectData = () => {\r\n  const url =\r\n    \"http://data.fixer.io/api/symbols?access_key=166e64d8585a6f6f7879b63ccc83ef8b&format=1\";\r\n\r\n  return new Promise((resolve, reject) => {\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data) => resolve(data.symbols))\r\n      .catch((err) => reject(err.info));\r\n  });\r\n};\r\n\r\nexport const fetchDataFake = (currentBase) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const bases = {\r\n        AED: 1.877,\r\n        AFN: 2.466,\r\n      };\r\n      bases[currentBase] ? resolve(bases[currentBase]) : reject(\"Currency not found\");\r\n    }, 1500);\r\n  });\r\n};\r\nexport const fetchSelectDataFake = () => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const options = {\r\n        AED: \"United Arab Emirates Dirham\",\r\n        AFN: \"Afghan Afghani\",\r\n      };\r\n      resolve(options);\r\n    }, 1500);\r\n  });\r\n};\r\n","export const INITIAL_STATE = {\r\n  input: '',\r\n  output: '',\r\n  options: [],\r\n  outputBase: \"\",\r\n  error: \"\",\r\n  isLoading: true,\r\n};\r\n\r\nexport const currencyReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case \"setOutput\":\r\n      return {\r\n        ...state,\r\n        output: action.payload,\r\n        error: \"\",\r\n      };\r\n    case \"setInput\":\r\n      return {\r\n        ...state,\r\n        input: action.payload,\r\n      };\r\n    case \"setOptions\":\r\n      return {\r\n        ...state,\r\n        options: action.payload,\r\n        isLoading: false,\r\n      };\r\n    case \"setOutputBase\":\r\n      return {\r\n        ...state,\r\n        outputBase: action.payload,\r\n      };\r\n    case \"setError\":\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        output: \"\",\r\n        isLoading: false,\r\n      };\r\n    default:\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n};\r\n","import styled from 'styled-components'\r\n\r\nexport const PageContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  width: 100vw;\r\n\r\n  background: linear-gradient(-45deg, #EE7752, #E73C7E, #23A6D5, #23D5AB);\r\n`;\r\n\r\nexport const CurrencyConverterContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: auto;\r\n  max-width: 800px;\r\n  background-color: #FDE74C;\r\n  padding: 20px 40px;\r\n  border-radius: 10px;\r\n\r\n`;\r\n\r\nexport const ConvertButton = styled.button`\r\npadding: 10px 20px;\r\nbackground-color: #9BC53D;\r\nmargin: 50px;\r\nborder: 1px solid transparent;\r\nborder-radius: 10px;\r\nwidth: 60%;\r\ncursor: pointer;\r\n\r\n&:hover {\r\n    border: 1px solid white;\r\n}\r\n`","import React, { useEffect, useReducer } from \"react\";\r\n\r\nimport { fetchData, fetchSelectData } from \"../../utils.js\";\r\nimport { currencyReducer, INITIAL_STATE } from \"./currency.reducer\";\r\nimport {PageContainer, CurrencyConverterContainer, ConvertButton} from \"./currency-converter.styles\";\r\n\r\nconst CurrencyConverter = () => {\r\n  const [state, dispatch] = useReducer(currencyReducer, INITIAL_STATE);\r\n  const { input, output, options, outputBase, isLoading, error } = state;\r\n\r\n  useEffect(() => {\r\n    const getOptions = async () => {\r\n      const options = Object.keys(await fetchSelectData());\r\n      dispatch({ type: \"setOptions\", payload: options });\r\n    };\r\n    getOptions();\r\n  }, []);\r\n\r\n  const handleConvertion = async () => {\r\n    try {\r\n      const outputBaseRate = await fetchData(outputBase);\r\n      const result = (input * outputBaseRate).toFixed(2);\r\n      dispatch({ type: \"setOutput\", payload: result });\r\n    } catch (error) {\r\n      dispatch({ type: \"setError\", payload: error });\r\n    }\r\n  };\r\n  const handleChange = (e) => {\r\n    dispatch({ type: \"setInput\", payload: e.target.value });\r\n  };\r\n  const handleSelectChange = (e) => {\r\n    dispatch({ type: \"setOutputBase\", payload: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <PageContainer>\r\n      <CurrencyConverterContainer>\r\n        <h2>Euro Currency Converter </h2>\r\n        <h3>From </h3>\r\n        <div>\r\n          <input type=\"text\" onChange={handleChange} value={input} autoFocus />\r\n          <select>\r\n            <option>EUR</option>\r\n          </select>\r\n        </div>\r\n        <h3>To </h3>\r\n        <div>\r\n          <input type=\"text\" readOnly value={output} />\r\n          <select onChange={handleSelectChange}>\r\n            <option>Select</option>\r\n            {options.map((option) => (\r\n              <option key={option}>{option}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <ConvertButton onClick={handleConvertion}><strong>CONVERT</strong></ConvertButton>\r\n        {error && <p>{error}</p>}\r\n        {isLoading && <p>Fetching API, please wait...</p>}\r\n      </CurrencyConverterContainer>\r\n    </PageContainer>\r\n  );\r\n};\r\n\r\nexport default CurrencyConverter;","import React from 'react';\nimport './App.css';\nimport CurrencyConverter from './components/currency-converter/currency-converter.component'\n\nfunction App() {\n  return (\n    <div>\n      <CurrencyConverter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}